{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11900\viewh14220\viewkind1
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Dossier LO43 : \
\

\fs28 Intro :
\fs24 \
\
Ce projet a pour objectif la r\'e9alisation d'un logiciel d'affichage d'emploi du temps d'une soci\'e9t\'e9 de transports en commun. Ils nous donc a \'e9t\'e9 demand\'e9 de r\'e9aliser une application r\'e9pondant aux fonctionnalit\'e9s suivantes : \
- Pouvoir lire un fichier avec les taches assign\'e9es \'e0 des chauffeurs\
- Afficher les informations lues dans une interface graphique avec les \'e9l\'e9ments suivants : Liste des chauffeurs et les taches qui leurs sont assign\'e9es, avoir un affichage sous la forme d'un diagramme de Gantt de ces taches, avoir les informations g\'e9n\'e9rales sur la solution ( nombre de chauffeur, cout g\'e9n\'e9ral, cout par chauffeur)\
- Pouvoir g\'e9n\'e9rer \'e0 partir d'une instance une solution exploitable par la suite par le logiciel.		   \
\

\fs28 I) Backend
\fs24 \
\
(- Mise en place d'un git pour le travail collaboratif)\
- Algo de lecture de fichier solution\
- Algo de g\'e9n\'e9ration de fichier solution\
\

\fs28 II) Frontend
\fs24 \
\
- Description g\'e9n\'e9rale de l'interface ( Sch\'e9ma global, puis \'e9l\'e9ment par \'e9l\'e9ment )\
- Code derri\'e8re les \'e9l\'e9ments les plus importants\
\

\fs28 Conclusion :
\fs24 \
\
A l'issue de ce projet, nous avons r\'e9ussi \'e0 produire une application fonctionnelle. Elle lit bien les fichiers solutions demand\'e9s et retranscrit les informations de celles-ci dans une interface graphique. Nous avons aussi pu impl\'e9menter un algorithme de cr\'e9ation de solution \'e0 partir des fichiers d'instances. Cet algorithme n'est par contre pas assez optimis\'e9 donc les couts que celui-ci renvoie sont sup\'e9rieurs aux couts pr\'e9sents dans les solution donn\'e9es avec le sujet.\
Nous avons aussi eu des soucis avec 'implantation du diagramme de Gantt. Celui-ci fonctionne pour l'emploi du temps d'un seul chauffeur mais nous avons pas pu r\'e9aliser un diagramme pour l'ensemble des chauffeurs.\
\
Objectif atteint, logiciel fonctionnel et travail optionnel effectu\'e9\
\
Am\'e9liorations possibles : Int\'e9gration du diagramme de Gantt (soucis dans son int\'e9gration), module d'impression d'emploi du temps, visualisation des taches d'un chauffeur sur une carte\
\
\page I) Backend \
\
Mise en place du git :\
Pour pouvoir travailler plus efficacement et surtout avoir une historisation et une sauvegarde de notre travail, nous avons d\'e9cid\'e9 de mettre en place un git pour notre projet. Nous avons utilis\'e9 les services du site GitHub et nous avons interfac\'e9 cela vers le plugin EGit pour Eclipse.\
Cela nous a permis de travailler chacun de notre cot\'e9 en sachant toujours que nous avions la derni\'e8re version des fichiers du projet, mais surtout d'avoir une sauvegarde \'e9tapes par \'e9tapes de l'avancement du projet.\
\
UML : \
Notre mod\'e9lisation UML se r\'e9sume \'e0 trois classes. \
\
Dans une premi\'e8re nous avec les Taches; \'e0 chaque Tache correspond un num\'e9ro, un Chauffeur attribu\'e9 et des informations sur les lieux et les horaires.\
Ensuite Nous avons les Chauffeurs caract\'e9ris\'e9s par un num\'e9ro, des informations sur leur co\'fbt, temps de travail, \'85 et surtout par une liste de Tache leur \'e9tant attribu\'e9e.\
Derni\'e8rement nous avons la Solution: celle-ci regroupe tous les Chauffeurs n\'e9cessaires et \'e9galement une copie de la liste de Taches avec en plus des informations globales. Cette classe est la seule utilis\'e9e par l'interface graphique ,elle ne peut acc\'e9der aux informations de Chauffeurs ou de Taches sans passer par la Solution.\
Ces trois classes nous ont permis de mod\'e9liser dans sont ensemble la partie donn\'e9e du probl\'e8me. Le reste des classes concerne l'interface graphique et la lecture des fichiers de solution.\
\
\
II) Frontend\
\
Diagramme de Gantt :\
Pour avoir un affichage plus visuel des emplois du temps des chauffeurs nous avons voulu int\'e9grer un diagramme de Gantt pour tous les chauffeurs mais aussi pour chaque chauffeur. Nous avons utilis\'e9 la librairie JFreeChart pour r\'e9aliser cela mais nous avons rencontr\'e9 quelques difficult\'e9s dans son utilisation. \
Nous avons r\'e9ussi a cr\'e9er un diagramme pour les chauffeurs de mani\'e8re individuelle. Nous pouvons ainsi visualiser l'emploi du temps d'un chauffeur sur sa journ\'e9e de travail.\
Par contre nous avons pas r\'e9ussi \'e0 cr\'e9er un diagramme regroupant toutes les t\'e2ches de tous les chauffeurs. Nous arrivons bien \'e0 faire afficher toutes les t\'e2ches de tous les chauffeurs mais ceux-ci se retrouve dans le d\'e9sordre et chaque t\'e2che a une couleur diff\'e9rente, ce qui rend le digramme tr\'e8s peu lisible. Le probl\'e8me vient de la saisi des informations mais aussi des diff\'e9rentes options de la librairie et nous avons eu beaucoup de mal \'e0 trouver de la documentation sur ce sujet.}